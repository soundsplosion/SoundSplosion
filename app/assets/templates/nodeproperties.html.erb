<link rel="import" href="<%= asset_path("editabletext.html")%>">
<link rel="import" href="<%= asset_path("editableclock.html")%>">
<template>
  <div id="header"><h3>Effect Properties</h3></div>
  <div id="container">
  </div>
  <style>
    #container{
      background: #243544;
      color: #FFFFFF;
      overflow-y: scroll;
    }
    #header {
      text-align: center;
      opacity: 0.9;
      position: relative;
      top: -15px;
      height: 25px;
    }
    .newSlider {
      position: relative;
      top: 5px;
      width: 110px;
    }
    .valueSpan {
      float: right;
      text-align: center;
      width: 80px;
    }
  </style>
</template>
<script>
  (function() {
    // get the template for that element
    var template = document.currentScript.ownerDocument.querySelector('template');

    // copy a prototype from HTMLElement
    var nodepropertiesPrototype = Object.create(HTMLElement.prototype);

    // specify the created callback ("constructor")
    nodepropertiesPrototype.createdCallback = function() {
      var root = this.createShadowRoot();
      root.appendChild(document.importNode(template.content, true));

      var container = root.querySelector("#container");

      root.host.addEventListener('click', function(){
        event.stopPropagation(); // stops the pane from being hidden when clicking
      });
    };

    // specify the "an attribute has changed" callback
    nodepropertiesPrototype.attributeChangedCallback = function(attrName, oldVal, newVal) {
      var root = this.shadowRoot;
      var container = root.querySelector("#container");
      var name = attrName.toLowerCase();
      var that = this;

      if (name === "targetid") {
        if(typeof newVal === 'undefined' || newVal === 'undefined')
          that.targetid = undefined;
        else
          that.targetid = parseInt(newVal);
      } else if (name === "targettype") {
        if(typeof newVal === 'undefined' || newVal === 'undefined')
          that.targettype = undefined;
        else
          that.targettype = newVal.toLowerCase();
      }

      if(typeof that.targetid !== 'undefined' && typeof that.targettype !== 'undefined'){
        // remove the current event handlers before setting new ones
        unsetEventHandlers(that);

        if (that.targettype === 'node') {
          that.target = rhomb.getNodeById(that.targetid);
        }
        else {
          that.target = undefined;
          console.log("[NodeProperties] - target node is undefined");
        }
      }

      function exampleHandler(){
        if(event.keyCode === 13)
          alert("[NodeProperties] Control " + event.srcElement.id + " contains " + event.srcElement.value);
      }

      function controlHandler() {
        var name  = event.srcElement.id;
        var index = that.paramMap[name].index;
        var node  = that.paramMap[name].target;
        var value = +event.srcElement.value;

        if (typeof node === "undefined") {
          console.log("[NodeProperties] - node in control handler is undefined");
          return;
        }

        node.normalizedSet(index, value);
        root.getElementById("paramValue_" + index).innerHTML = node.parameterDisplayString(index);
      }

      if(typeof that.target !== 'undefined') {
        // Example code
        //container.innerHTML = "<denoto-editabletext id='test1' type='shortttext' value='[Edit me!]'></denoto-editabletext>";
        //that.controls = [{id: "test1", on: "keyup", callback: exampleHandler}];
        //isetEventHandlers(that);

        that.paramMap = that.target.getParamMap();
        container.innerHTML = that.target.getInterface().innerHTML;
        that.controls = that.target.getControls(controlHandler);

        setEventHandlers(that);
      }
    };

    nodepropertiesPrototype.detachedCallback = function(){
      unsetEventHandlers(this);
      this.setAttribute("targetid", undefined);
      this.targetid = undefined;
      this.setAttribute("targettype", undefined);
      this.targettype = undefined;
    };

    function setEventHandlers(that) {
      for(var i in that.controls){
        var control = that.controls[i];
        var element = that.shadowRoot.getElementById(control.id);
        if (element !== null && typeof element !== "undefined") {
          element.addEventListener(control.on, control.callback);
        }
      }
    }

    function unsetEventHandlers(that) {
      for(var i in that.controls){
        var control = that.controls[i];
        var element = that.shadowRoot.getElementById(control.id);
        if (element !== null && typeof element !== "undefined") {
          element.removeEventListener(control.on, control.callback);
        }
      }
    }

    // register the element
    var nodeproperties = document.registerElement('denoto-nodeproperties', {prototype: nodepropertiesPrototype});
  })();
</script>