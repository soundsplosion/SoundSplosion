<link rel="import" href="<%= asset_path("editabletext.html")%>">
<link rel="import" href="<%= asset_path("editableclock.html")%>">
<template>
  <div id="header"><h3>Effect Properties</h3></div>
  <div id="container">
  </div>
  <style>
    #container{
      background: #243544;
      color: #FFFFFF;
    }
    #header {
      text-align: center;
      opacity: 0.9;
      position: relative;
      top: -15px;
      height: 25px;
    }
  </style>
</template>
<script>
  (function() {
    // get the template for this element
    var template = document.currentScript.ownerDocument.querySelector('template');

    // copy a prototype from HTMLElement
    var nodepropertiesPrototype = Object.create(HTMLElement.prototype);

    // specify the created callback ("constructor")
    nodepropertiesPrototype.createdCallback = function() {
      var root = this.createShadowRoot();
      root.appendChild(document.importNode(template.content, true));

      var container = root.querySelector("#container");

      root.host.addEventListener('click', function(){
        event.stopPropagation(); // stops the pane from being hidden when clicking
      });
    };

    // specify the "an attribute has changed" callback
    nodepropertiesPrototype.attributeChangedCallback = function(attrName, oldVal, newVal) {
      var root = this.shadowRoot;
      var container = root.querySelector("#container");
      var name = attrName.toLowerCase();
      var that = this;

      if (name === "targetid") {
        if(typeof newVal === 'undefined' || newVal === 'undefined')
          this.targetid = undefined;
        else
          this.targetid = parseInt(newVal);
      } else if (name === "targettype") {
        if(typeof newVal === 'undefined' || newVal === 'undefined')
          this.targettype = undefined;
        else
          this.targettype = newVal.toLowerCase();
      }

      if(typeof this.targetid !== 'undefined' && typeof this.targettype !== 'undefined'){
        // remove the current event handlers before setting new ones
        unsetEventHandlers(this);

        if(this.targettype === 'node')
          this.target = rhomb.getSong().getEffects()[this.targetid];
        else if(this.targettype === 'instrument')
          this.target = rhomb.getSong().getInstruments().getObjById(this.targetid);
        else
          this.target = undefined;
      }

      function exampleHandler(){
        if(event.keyCode === 13)
          alert("[NodeProperties] Control " + event.srcElement.id + " contains " + event.srcElement.value);
      }

      if(typeof this.target !== 'undefined'){

        // Example code
        container.innerHTML = "<denoto-editabletext id='test1' type='shortttext' value='[Edit me!]'></denoto-editabletext>";
        this.controls = [{id: "test1", on: "keyup", callback: exampleHandler}];
        setEventHandlers(this);


        // container.innerHTML = this.target.getInterface();   // To TG: this is where the interface goes
        //                                                     // this.target is the node that is currently selected. Doing this.target.setGain(0.5) or whatever will do that
        //                                                     // to the rhombus object that corresponds to it. Note that <script> tags will not work with innerHTML, so in order
        //                                                     // for your controls to be able to do anything, you'll have to add event listeners using the following method
        //
        // this.controls = this.target.getControls();          // Return an array of any callbacks used in your interface
        //                                                     // For example, a velocity control with id "velocityCtrl" that should call a handleKeyUp function you've written
        //                                                     // when they keyup event is triggered would be rendered as:
        //                                                     // {id: "velocityCtrl", on: "keyup", callback: handleKeyUp} // where handleKeyUp is a variable containing the function*/
        //                                                     // Just return an array of these objects, and this component should set them up/tear them down for you
        // setEventHandlers(this);
      }
    };

    nodepropertiesPrototype.detachedCallback = function(){
      unsetEventHandlers(this);
    };

    function setEventHandlers(that){
      for(var i in that.controls){
        var control = that.controls[i];
        that.shadowRoot.getElementById(control.id).addEventListener(control.on, control.callback);
      }
    }

    function unsetEventHandlers(that){
      for(var i in that.controls){
        var control = that.controls[i];
        that.shadowRoot.getElementById(control.id).removeEventListener(control.on, control.callback);
      }
    }

    // register the element
    var nodeproperties = document.registerElement('denoto-nodeproperties', {prototype: nodepropertiesPrototype});
  })();
</script>