<template>
  <span>
    <canvas id="spectrum-canvas" width="160" height="50"></canvas>
  </span>
  <style>
    #spectrum-canvas {
      position: absolute;
      right: 1%;
      top: 48px;
      display: inline-block;
    }
  </style>
</template>

<script>
  (function() {
    // get the template for this element
    var template = document.currentScript.ownerDocument.querySelector('template');

    // declare persistent buttons
    var cavas;

    // copy a prototype from HTMLElement
    var spectrumPrototype = Object.create(HTMLElement.prototype);

    // specify the created callback ("constructor")
    spectrumPrototype.createdCallback = function() {
      var root = this.createShadowRoot();
      root.appendChild(document.importNode(template.content, true));
      canvas = root.querySelector('#spectrum-canvas');

      var context = Tone.Master.context;
      var audioBuffer;
      var sourceNode;
      var analyser;
      var javascriptNode;

      // get the context from the canvas to draw on
      var ctx = canvas.getContext("2d");

      // create a gradient for the fill. Note the strange
      // offset, since the gradient is calculated based on
      // the canvas, not the specific element we draw
      var gradient = ctx.createLinearGradient(0,0,0,300);
      gradient.addColorStop(1,'#000000');
      gradient.addColorStop(0.75,'#ff0000');
      gradient.addColorStop(0.25,'#ffff00');
      gradient.addColorStop(0,'#ffffff');

      // load the sound
      setupAudioNodes();
      ctx.fillStyle = gradient;

      function setupAudioNodes() {

        // setup a javascript node
        javascriptNode = context.createScriptProcessor(2048, 1, 1);
        // connect to destination, else it isn't called
        javascriptNode.connect(context.destination);

        // setup a analyzer
        analyser = context.createAnalyser();
        analyser.smoothingTimeConstant = 0.3;
        analyser.fftSize = 512;

        // create a buffer source node
        sourceNode = context.createBufferSource();
        sourceNode.connect(analyser);
        analyser.connect(javascriptNode);

        sourceNode.connect(context.destination);
      }

      javascriptNode.onaudioprocess = function() {
        // get the average for the first channel
        var array =  new Uint8Array(analyser.frequencyBinCount);
        analyser.getByteFrequencyData(array);
        // clear the current state
        ctx.clearRect(0, 0, 160, 50);
        ctx.fillStyle="#FF0000";
        drawSpectrum(array);
      }

      function drawSpectrum(array) {
        for ( var i = 0; i < (array.length); i++ ){
          var value = array[i]; 
          ctx.fillRect(i*5,50-value,3,50);
        }
     };

    // register the element
    var spectrum = document.registerElement('denoto-spectrum', {prototype: spectrumPrototype});
  })();
</script>