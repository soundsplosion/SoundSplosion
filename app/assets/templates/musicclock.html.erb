<template>
  <div id="musicclock">
    <!--Time Signature: <denoto-editabletext id="beat_count" type="tinytext" value="4" suffix="/"></denoto-editabletext><denoto-editabletext id="beat_type" type="tinytext" value="4" width="30"></denoto-editabletext>-->
    BPM: <denoto-editabletext id="BPM" type="shortertext" value="0" width="30"></denoto-editabletext>
    
    <span id="spacer"><denoto-editableclock id="cur_time" value="1" isposition="true" caption="Current Time: "></denoto-editableclock>
    </span>
  </div>
  <style>
    #musicclock{
      opacity: 0.9;
      position: relative;
      top: 10px;
      display: inline-block;
    }
    #spacer{
      display: inline-block;
      width: 145px;
    }
  </style>
</template>
<script src="<%= asset_path("time.js")%>"></script>
<script>
  (function() {
    // get the template for this element
    var template = document.currentScript.ownerDocument.querySelector('template');

    // copy a prototype from HTMLElement
    var musicclockPrototype = Object.create(HTMLElement.prototype);

    // specify the created callback ("constructor")
    musicclockPrototype.createdCallback = function() {
      var that = this;
      var root = this.createShadowRoot();
      root.appendChild(document.importNode(template.content, true));

      // initialize beats per minute
      var bpm = root.querySelector("#BPM");
      bpm.value = 120;

      // initialize time signature
      /*var beat_count = root.querySelector("#beat_count");
      var beat_type = root.querySelector("#beat_type");
      beat_count.value = 4;
      beat_type.value = 4;*/

      // initialize current time
      var cur_time = root.querySelector("#cur_time");

      document.addEventListener('denoto-setbpm', function() {
        bpm.setAttribute("value", event.detail.bpm);
      });

      document.addEventListener('denoto-settimesignature', function() {
        beat_count.setAttribute("value", event.detail.numerator);
        beat_type.setAttribute("value", event.detail.denominator);
      });

      document.addEventListener('denoto-setcurrenttime', function() {
        cur_time.setAttribute("value", event.detail.ticks);
      });

      bpm.addEventListener('keyup', function() {
        if (event.keyCode == 13) {
          // TODO: sanitize inputs
          var input = parseInt(event.srcElement.value);
          // rhomb.set beats per minute here
          var result = rhomb.setBpm(input);
          if (typeof result === "undefined") {
            console.log("[Denoto] - error setting BPM");
          }
        }
      });

      /*beat_count.addEventListener('keyup', function() {
        if (event.keyCode == 13) {
          // TODO: sanitize inputs
          var input = parseInt(event.srcElement.value);
          var timeEvent = new CustomEvent("denoto-settimesignature", {"detail": {"numerator": input, "denominator": parseInt(beat_type.value)}});
          document.dispatchEvent(timeEvent);

          // rhomb.set time signature here
        }
      });

      beat_type.addEventListener('keyup', function() {
        if (event.keyCode == 13) {
          // TODO: sanitize inputs
          var input = parseInt(event.srcElement.value);
          var timeEvent = new CustomEvent("denoto-settimesignature", {"detail": {"numerator": parseInt(beat_count.value), "denominator": input}});
          document.dispatchEvent(timeEvent);
          // rhomb.set time signature here
        }
      });*/

      cur_time.addEventListener('editableclock-changed', function() {
        rhomb.moveToPositionTicks(cur_time.value);
        var timeEvent = new CustomEvent('denoto-updatestartpos', {detail: undefined});
        document.dispatchEvent(timeEvent);
      });
    };

    // register the element
    var musicclock = document.registerElement('denoto-musicclock', {prototype: musicclockPrototype});
  })();
</script>