<template>
	<style>
		#pianoroll {
			position: relative;
			left: 0px;
			top: 0px;
			white-space: nowrap;
			margin: 0px;
			padding: 0px;
		}
		#bgCanvas {
			position: absolute;
			left: 100px;
			top: 0px;
			margin: 0px;
			padding: 0px;
		}
		#fgCanvas {
			position: absolute;
			left: 100px;
			top: 0px;
			margin: 0px;
			padding: 0px;
		}
	</style>
	<div id="pianoroll" style="" oncontextmenu="return false;">
		<canvas id="bgCanvas" width="1200" height="560"></canvas>
		<canvas id="fgCanvas" width="1200" height="560"></canvas>
	</div>
</template>
<script>
    (function(){
		// declare a persistent canvas
		var canvas;

		// get the template for this element
		var template = document.currentScript.ownerDocument.querySelector('template');

		// copy a prototype from HTMLElement
		var pianorollPrototype = Object.create(HTMLElement.prototype);

		// keep track of mouse coordinates
		var mouseX, mouseY;
		var prevX, prevY, prevMX, prevMY;

		// keep track of clicked key info
		var keyHeight, keyType, keyValue;

		// keep track of displayed notes
		var noteset = new NoteSet();
		var currentNote, previousNote;
		var previousMouseY, previousHeight;

		// current cursor mode. Options: draw, select
		var mode = 'draw';

		// set by mousedown, unset by mouseup, used in mousemove
		var button;

		// specify the created callback ("constructor")
		pianorollPrototype.createdCallback = function(){
			var root = this.createShadowRoot();
			root.appendChild(document.importNode(template.content, true));

			// give the noteset access to the host in order to throw events
			noteset.host = root.host;

			// get the canvas info
			canvas = root.querySelector('#bgCanvas');
			var context = canvas.getContext("2d");
			var width = canvas.getAttribute("width");
			var height = canvas.getAttribute("height");

			// fill the canvas background
			context.beginPath();
			context.rect(1, 1, width-2, height-2);
			context.fillStyle = "#EEEEEE";			
			context.fill();

			// draw the black key bars
			var on = true;
			var times = 0;
			for(var i = 30.0; i < height; i += 20.0){
				times++;
				context.beginPath();
				context.rect(0, i, width, 20);
				context.linewidth = 5;
				if(on && times !== 7 && times !== 13){
					context.strokeStyle = "#000000";
					context.fillStyle = "#BBBBBB";
					context.fill();
					context.stroke();
					on = false;
				} else {
					on = true;
				}
				if(times === 7 || times === 13)
					on = false;
				if(times > 14)
					times = 1;
			}

			// draw the no-black-key bars
			on = true;
			for(var i = 160.0; i < height;){
				context.beginPath();
				context.moveTo(0, i);
				context.lineTo(width, i);
				context.linewidth = 5;
				context.strokeStyle = "#000000";
				context.fillStyle = "#AAAAAA";
				context.fill();
				context.stroke();
				if(on){
					on = false;
					i += 120;
				} else {
					on = true;
					i += 160;
				}
			}

			// draw the measure bars
			for(var i = 0.0; i < width; i += 40.0){
				context.beginPath();
				context.linewidth = 5;
				//context.rect(i, 0, 40, height);
				context.moveTo(i, 0);
				context.lineTo(i, height);
				if(i % 160 === 0.0){
					//context.fillStyle = "#AAAAAA";
					context.strokeStyle = "#000000";
				} else {
					//context.fillStyle = "#CCCCCC";
					context.strokeStyle = "#666666";
				}
				context.fill();
				context.stroke();
			}

			// outline the canvas
			context.beginPath();
			context.rect(1, 1, width-2, height-2);
			context.linewidth = 5;
			context.strokeStyle = "#000000";
			context.stroke();

			canvas = root.querySelector('#fgCanvas');
			context = canvas.getContext("2d");

			// temporary for debugging
			document.addEventListener('keypress', function(){
				if(event.charCode === 115){ // pressed 's'
					mode = 'select';
					canvas.style.cursor = 'auto';
				}
				else if(event.charCode === 100){ // pressed 'd'
					mode = 'draw';
					canvas.style.cursor = 'cell';
				}
			});

			document.addEventListener('keypress', function(){
				if(event.charCode === 120){
					if(typeof currentNote !== 'undefined'){
						context.clearRect(((currentNote.measure * 4 + currentNote.beat - 5) * 40) - 1, currentNote.ypos-1, (currentNote.duration * 40)+2, currentNote.height+2);

						// dispatch the event so that listeners can handle it
						noteset.RemoveNote(currentNote);
						currentNote = undefined;
						previousNote = undefined;
					}
				}
			});

			// add mouse event handling
			canvas.addEventListener('mousemove', function(){
				// handle left click-and-drag based on the cursor mode
				if(mode === 'draw'){
					canvas.style.cursor = 'cell';
					if(typeof mouseX !== 'undefined' && typeof mouseY !== 'undefined' && button === 0)
						if(typeof prevX === 'undefined' && typeof prevY === 'undefined'){
							prevX = mouseX;
							prevY = mouseY;
						} else {
							// draw a preview rectangle
							var pageOffset = document.body.getBoundingClientRect();
							var offset = canvas.getBoundingClientRect();
							var x = event.pageX - (offset.left - pageOffset.left) - mouseX;
							var y = keyHeight;
							var sign = x === 0 ? 1 : Math.abs(x)/x;
							x = x - x % 40 + 40;
							
							var color;

							if(keyType === "white"){
								color = "#AAAAFF";
							} else {
								color = "#6666AA";
							}
							
							//erase the old rectangle
							context.clearRect(prevMX-1, prevMY-1, prevX+2, prevY+2);

							// deal with backwards note drawing
							if(sign < 0){
								drawRect(context, {left: mouseX + x - 80, top: mouseY, right: -(x - 80) + 40, bottom: y}, color, "#000044", 5);

								prevMX = mouseX + x - 80;
								prevMY = mouseY;
								prevX = -(x - 80) + 40;
								prevY = y;
							} else {
								drawRect(context, {left: mouseX, top: mouseY, right: x, bottom: y}, color, "#000044", 5);

								prevMX = mouseX;
								prevMY = mouseY;
								prevX = x;
								prevY = y;
							}
						}

				}
				else
					canvas.style.cursor = 'auto';
			});


			canvas.addEventListener('mousedown',
				function(){
					// keep the i-bar "text cursor"
					event.preventDefault();

					// set mouse button for mousemove events
					button = event.button;

					// get page coordinates for the mouse that account for scrolling
					var pageOffset = document.body.getBoundingClientRect();
					var offset = canvas.getBoundingClientRect();
					mouseX = event.pageX - (offset.left - pageOffset.left);
					mouseY = event.pageY - (offset.top - pageOffset.top);

					// calculate effective pixel positions for the piano roll
					mouseX = mouseX - mouseX % 40;
					mouseY = mouseY - mouseY % 10;

					var effectiveY = mouseY % 280;
					keyValue = 24 - Math.floor(mouseY / 280) * 12;

					if(effectiveY === 0){			// B
						keyHeight = 30;
						keyType = "white";
						keyValue -= 0;
					} else if(effectiveY === 10){
						keyHeight = 30;
						keyType = "white";
						mouseY -= 10;
						keyValue -= 0;
					} else if(effectiveY === 20){
						keyHeight = 30;
						keyType = "white";
						mouseY -= 20;
						keyValue -= 0;
					} else if(effectiveY === 30){	// B Flat
						keyHeight = 20;
						keyType = "black";
						keyValue -= 1;
					} else if(effectiveY === 40){
						keyHeight = 20;
						keyType = "black";
						mouseY -= 10;
						keyValue -= 1;
					} else if(effectiveY === 50){	// A
						keyHeight = 20;
						keyType = "white";
						keyValue -= 2;
					} else if(effectiveY === 60){
						keyHeight = 20;
						keyType = "white";
						mouseY -= 10;
						keyValue -= 2;
					} else if(effectiveY === 70){	// A flat
						keyHeight = 20;
						keyType = "black";
						keyValue -= 3;
					} else if(effectiveY === 80){
						keyHeight = 20;
						keyType = "black";
						mouseY -= 10;
						keyValue -= 3;
					} else if(effectiveY === 90){	// G
						keyHeight = 20;
						keyType = "white";
						keyValue -= 4;
					} else if(effectiveY === 100){
						keyHeight = 20;
						keyType = "white";
						mouseY -= 10;
						keyValue -= 4;
					} else if(effectiveY === 110){	// F sharp
						keyHeight = 20;
						keyType = "black";
						keyValue -= 5;
					} else if(effectiveY === 120){
						keyHeight = 20;
						keyType = "black";
						mouseY -= 10;
						keyValue -= 5;
					} else if(effectiveY === 130){	// F
						keyHeight = 30;
						keyType = "white";
						keyValue -= 6;
					} else if(effectiveY === 140){
						keyHeight = 30;
						keyType = "white";
						mouseY -= 10;
						keyValue -= 6;
					} else if(effectiveY === 150){
						keyHeight = 30;
						keyType = "white";
						mouseY -= 20;
						keyValue -= 6;
					} else if(effectiveY === 160){	// E
						keyHeight = 30;
						keyType = "white";
						keyValue -= 7;
					} else if(effectiveY === 170){
						keyHeight = 30;
						keyType = "white";
						mouseY -= 10;
						keyValue -= 7;
					} else if(effectiveY === 180){
						keyHeight = 30;
						keyType = "white";
						mouseY -= 20;
						keyValue -= 7;
					} else if(effectiveY === 190){	// E flat
						keyHeight = 20;
						keyType = "black";
						keyValue -= 8;
					} else if(effectiveY === 200){
						keyHeight = 20;
						keyType = "black";
						mouseY -= 10;
						keyValue -= 8;
					} else if(effectiveY === 210){	// D
						keyHeight = 20;
						keyType = "white";
						keyValue -= 9;
					} else if(effectiveY === 220){
						keyHeight = 20;
						keyType = "white";
						mouseY -= 10;
						keyValue -= 9;
					} else if(effectiveY === 230){	// C sharp
						keyHeight = 20;
						keyType = "black";
						keyValue -= 10;
					} else if(effectiveY === 240){
						keyHeight = 20;
						keyType = "black";
						mouseY -= 10;
						keyValue -= 10;
					} else if(effectiveY === 250){	// C
						keyHeight = 30;
						keyType = "white";
						keyValue -= 11;
					} else if(effectiveY === 260){
						keyHeight = 30;
						keyType = "white";
						mouseY -= 10;
						keyValue -= 11;
					} else if(effectiveY === 270){
						keyHeight = 30;
						keyType = "white";
						mouseY -= 20;
						keyValue -= 11;
					} else {
						keyHeight = 20;
						keyType = "white";
					}

					// select the clicked-on note
					var measure = Math.floor(mouseX / 160) + 1;
					var beat = ((mouseX % 160) / 40) + 1;
					
					if(mode === 'select'){
						noteset.SelectNote({keyValue: keyValue, measure: measure, beat: beat});
					}
				});
			canvas.addEventListener('mouseup',
				function(){
					// unset the mousebutton for mousemove
					button = undefined;

					// don't draw anything if mouseX or mouseY originated outside of the canvas
					if(typeof mouseX === 'undefined' || typeof mouseY === 'undefined'){
						return;
					}

					var keyEvent;
					// get page coordinates for the mouse that account for scrolling
					var pageOffset = document.body.getBoundingClientRect();
					var offset = canvas.getBoundingClientRect();
					var x = event.pageX - (offset.left - pageOffset.left) - mouseX;
					//var x = event.pageX - 100.0 - mouseX;
					
					var sign = x === 0 ? 1 : Math.abs(x)/x;
					x = x - x % 40 + 40;

					// deal with backwards note drawing
					if(sign < 0){
						mouseX += x - 80;
						x = -x + 120;
					}

					var measure = Math.floor(mouseX / 160) + 1;
					var beat = ((mouseX % 160) / 40) + 1;
					var duration = (x / 40);
					var y = keyHeight;
					var color;
					var tickstart = (measure * 4 + beat) * 120; // currently 4/4 time, 480 ticks per beat
					var tickduration = duration * 120; // 480 ticks per beat

					if(keyType === "white"){
						color = "#AAAAFF";
					} else {
						color = "#6666AA";
					}

					if(event.button === 2.0){
						var myNote = noteset.SelectNote({"keyValue": keyValue, "measure": measure, "beat": beat, "duration": duration, "tickstart": tickstart, "tickduration": tickduration});
						noteset.RemoveNote(myNote);
						context.clearRect(((myNote.measure * 4 + myNote.beat - 5) * 40) - 1, mouseY-1, (myNote.duration * 40)+2, y+2);
					} else if(mode === 'draw') {
						drawRect(context, {left: mouseX, top: mouseY, right: x, bottom: y}, color, "#000044", 5);

						// let the noteset handle the event
						noteset.AddNote(new Note({"keyValue": keyValue, "measure": measure, "beat": beat, "duration": duration, "tickstart": tickstart, "tickduration": tickduration, color: color, height: y, ypos: mouseY}));
					} else if(mode === 'select') {
						// try to grab a note from the noteset
						var myNote = noteset.SelectNote({"keyValue": keyValue, "measure": measure, "beat": beat, "duration": duration, "tickstart": tickstart, "tickduration": tickduration, color: color});
						previousNote = currentNote;
						currentNote = myNote;
						if(typeof previousNote !== 'undefined'){
							drawRect(context, {left: ((previousNote.measure * 4 + previousNote.beat - 5) * 40),
								top: previousMouseY,
								right: (previousNote.duration * 40),
								bottom: previousHeight}, previousNote.color, "#000044", 5);
						}
						if(typeof currentNote !== 'undefined'){
							drawRect(context, {left: ((currentNote.measure * 4 + currentNote.beat - 5) * 40),
								top: mouseY,
								right: (currentNote.duration * 40),
								bottom: y}, "#66FF66", "#000044", 5);
						}
						previousMouseY = mouseY;
						previousHeight = y;
					}

					// reset mouseX and mouseY to undefined
					mouseX = undefined;
					mouseY = undefined;
					prevX = undefined;
					prevY = undefined;
					prevMX = undefined;
					prevMY = undefined;
				});

			// reset mouse attributes when mousing out of the canvas
			canvas.addEventListener('mouseout',
				function(){
					// erase any preview rectangle
					context.clearRect(prevMX-1, prevMY-1, prevX+2, prevY+2);

					mouseX = undefined;
					mouseY = undefined;
					prevX = undefined;
					prevY = undefined;
					prevMX = undefined;
					prevMY = undefined;
				});
		};

		// register the element
		var pianoroll = document.registerElement('denoto-pianoroll', {prototype: pianorollPrototype});
})();

// represents a set of notes to be displayed
function NoteSet(){
	this.host = undefined;
	this.lanes = new Array();
	for(var i = 1; i <= 24; i++){
		this.lanes[i] = new Array();
	}
}

// adds a note to the noteset
NoteSet.prototype.AddNote = function(note){
	// assign a new ID to the note
	var rnote = new rhomb.Note(note.keyValue, note.tickstart, note.tickduration);
	note.rnote = rnote;
	note.ID = rnote.id;

	// throw rhombus note creation
	var keyEvent = new CustomEvent("denoto-writenote", {"detail":{"note": rnote}});
	this.host.dispatchEvent(keyEvent);

	// put the note in each place a click will correspond to it
	var lane = this.lanes[note.keyValue];
	for(var i = note.start; i < note.end; i++){
		lane[i] = note;
	}
}

// selects a note from the noteset
NoteSet.prototype.SelectNote = function(event){
	var lane = event.keyValue;
	var index = (event.measure - 1) * 4 + event.beat;
	return this.lanes[lane][index];
}

// removes a note from the noteset
NoteSet.prototype.RemoveNote = function(note){
	// throw the rhombus note deletion
	var keyEvent = new CustomEvent("denoto-erasenote", {"detail": {"note": note.rnote}});
	this.host.dispatchEvent(keyEvent);

	// remove the note from each place it was found
	var lane = this.lanes[note.keyValue];
	for(var i = note.start; i < note.end; i++){
		lane[i] = undefined;
	}
}

// represents a single note that exists in the pianoroll
function Note(event){
	this.keyValue = event.keyValue;
	this.duration = event.duration;
	this.start = (event.measure - 1) * 4 + event.beat;
	this.end = this.start + event.duration;
	this.measure = event.measure;
	this.beat = event.beat;
	this.tickstart = event.tickstart;
	this.tickduration = event.tickduration;
	this.color = event.color;
	this.ID = undefined;
	this.rnote = undefined;
	this.height = event.height;
	this.ypos = event.ypos;
}
</script>
