<template>
  <div id="container">
    <div id="tracklist"></div>
    <div id="covercontainer"><div id="rowcover"></div></div>
    <div id="addbutton">
      <span class="add_track_text">Add New Track</span>
      <select id="inst_select">
        <option value="mono">Synth</option>
        <option value="samp">Sampler</option>
      </select>
    </div>
  </div>
  <style>
  #covercontainer{
    position: relative;
    top: -7px;
  }
  #rowcover{
    position: absolute;
    left: 200px;
    height: 80px;
    background: #888888;
    opacity: 0.5;
  }
  #addbutton{
    position: relative;
    top: 0px;
    background: #243544;
    width: 200px;
    height: 50px;
    color: #FFF;
    z-index: 5;
    text-align: center;
    padding-top: 25px;
  }
  #addbutton:hover{
    background: #000000;
    opacity: 0.5;
    cursor: pointer;
  }
  .add_track_text {
    opacity: 0.9;
  }
  *{
    padding: 0;
    margin: 0;  
  }
  #tracklist {
    width: 200px;
    padding: 0px;
    position: relative;
    top: -5px;
  }
  .pianokey {
    padding: 0px;
    margin: 0px;
  }
 </style>
</template>
<link rel="import" href="<%= asset_path("track.html")%>">
<script>
  (function(){
    // get the template for this element
    var template = document.currentScript.ownerDocument.querySelector('template');

    // copy a prototype from HTMLElement
    var tracklistPrototype = Object.create(HTMLElement.prototype);

    // start out with no tracks
    var tracks = 0;
    var root;

    var instType = "mono";

    // specify the created callback ("constructor")
    tracklistPrototype.createdCallback = function(){
      root = this.createShadowRoot();
      root.appendChild(document.importNode(template.content, true));

      root.host.ownerDocument.addEventListener("denoto-addtrack", function(){
        createTrack(this, event.detail.track, event.detail.index);
      });

      root.getElementById("addbutton").addEventListener("mouseup", function(){
        event.preventDefault();
      });

      root.getElementById("addbutton").addEventListener("mouseover", function(){
        event.preventDefault();
      });

      root.getElementById("inst_select").addEventListener('change', function(){
        instType = event.srcElement.value;
      });

      root.getElementById("addbutton").addEventListener("mouseup", function(){
        if(event.button === 0){
          var trkId = rhomb.getSong().addTrack();
          var index = rhomb.getSong().getTracks().getSlotById(trkId);
          var track = rhomb.getSong().getTracks().getObjById(trkId);

          console.log("[TrackList] - Adding instrument of type " + instType);
          
          // Create a new Instrument and set it as the new Track's target
          var instrId = rhomb.addInstrument(instType);

          rhomb.getSong().getInstruments().getObjById(instrId).normalizedSetByName("volume", 0.1);
          track._target = instrId;

          var trackEvent = new CustomEvent("denoto-addtrack", {"detail": {"index": index, "track": track}});
          document.dispatchEvent(trackEvent);
        }
      });

      root.host.ownerDocument.addEventListener('denoto-deletetrack', function(){
        root.getElementById('tracklist').removeChild(event.detail.div);
        tracks--;

        // Delete the instrument tied to this track
        var track = rhomb.getSong().getTracks().getObjById(event.detail.track.id);
        rhomb.removeInstrument(track._target);
        // Delet the actual track
        rhomb.getSong().deleteTrack(track._id);

        //root.getElementById("rowcover").style.top = (root.getElementById("addbutton").getBoundingClientRect().top - 195) + "px";

        var heightEvent = new CustomEvent('denoto-setheights', {"detail": {"height": tracks * 80 + 78}});
        root.host.ownerDocument.dispatchEvent(heightEvent);
      });

      var count = this.getAttribute('trackcount');
      //if(count !== null && parseInt(count) > 0){
        //createTracks(this, count);
      //}
    };

    // specify the "an attribute has changed" callback
    tracklistPrototype.attributeChangedCallback = function(attrName, oldVal, newVal){
      if(attrName === "trackcount"){
        createTracks(this, newVal);
      }
    };

    // helper function to create empty tracks in the shadow div
    function createTracks(that, count){
      var max = parseInt(count);
      var track;

      for(var i = tracks; i < max; i++){
        track = document.createElement('denoto-track');
        that.shadowRoot.getElementById('tracklist').appendChild(track);
      }

      tracks = max;

      // use the bottom coordinates of the last track to set the height of the tracklist
      var heightEvent = new CustomEvent('denoto-setheights', {"detail": {"height": tracks * 80 + 78}});
      root.host.ownerDocument.dispatchEvent(heightEvent);
    }

    // helper function to create empty tracks in the shadow div
    function createTrack(that, track_object, index){
      var track = document.createElement('denoto-track');
      track.setAttribute("name", track_object._name);
      track.setAttribute("id", track_object._id);
      track.setAttribute("index", index);

      root.getElementById('tracklist').appendChild(track);

      tracks++;

      //root.getElementById("rowcover").style.top = (root.getElementById("addbutton").getBoundingClientRect().top - 195) + "px";
      root.getElementById("rowcover").style.width = (parseInt(root.host.ownerDocument.body.clientWidth) - 350) + "px";
      
      var heightEvent = new CustomEvent('denoto-setheights', {"detail": {"height": tracks * 80 + 78}});
      root.host.ownerDocument.dispatchEvent(heightEvent);
    }

    // register the element
    var tracklist = document.registerElement('denoto-tracklist', {prototype: tracklistPrototype});
  })();
</script>
