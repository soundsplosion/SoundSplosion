 <template>
	<style>
		#container{
			position: relative;
			top: 5px;
			background: #243544;
			width: 200px;
			height: 60px;
			text-align: center;
			padding-top: 5px;
			margin-left: auto;
			margin-right: auto;
			margin-bottom: 10px;
		}
		#colorbox{
			width: 100px;
			height: 30px;
			margin-left: auto;
			margin-right: auto;
			background: #6666AA;
			position: relative;
			top: 3px;
		}
		.tb_button {
			-webkit-filter: invert(100%);
			float: right;
			opacity: 0.75;
			position: absolute;
			top: 5px;
			right: 5px;
		}
		.tb_button:hover{
			opacity: 1.0;
			cursor: pointer;
		}
	</style>
	<div id="container">
		<div id="deletediv"><img class="tb_button" id="delete" src="<%= asset_path("delete_box.png")%>" width="15" height="15" alt="Delete Pattern" /></div>
		<div><denoto-editabletext id="patternname" value="[Click to name pattern]"></denoto-editabletext></div>
		<input type="hidden" id="pattern_color"></input>
		<input type="hidden" id="pattern_duration"></input>
		<input type="hidden" id="pattern_id"></input>
		<div id="colorbox"></div>
	</div>
</template>
<link rel="import" href="<%= asset_path("editabletext.html")%>">

<script>
	(function(){
		// get the template for this element
		var template = document.currentScript.ownerDocument.querySelector('template');

		// copy a prototype from HTMLElement
		var patternPrototype = Object.create(HTMLElement.prototype);

		// specify the created callback ("constructor")
		patternPrototype.createdCallback = function(){
			var root = this.createShadowRoot();
			root.appendChild(document.importNode(template.content, true));

			var container = root.getElementById("container");

			var color = this.getAttribute("color");
			if(typeof color !== 'undefined' && color !== null){
				root.getElementById("colorbox").style.background = color;
				root.getElementById("pattern_color").value = color;
			}

			var duration = parseInt(this.getAttribute("duration"));
			if(duration > 0){
				root.getElementById("pattern_duration").value = duration;
			} else {
				root.getElementById("pattern_duration").value = 1920;
			}

			var id = parseInt(this.getAttribute("id"));
			if(id !== 0){
				root.getElementById("pattern_id").value = (parseInt(id)).toString();
			}

			var name = this.getAttribute("value");
			if(typeof name !== 'undefined' && name !== null)
				root.getElementById("patternname").setAttribute("value", name);

			var colorbox = root.getElementById("colorbox");
			colorbox.addEventListener('mousedown', function(){
				event.preventDefault();
				
				if(event.button === 0){
					var pattern_id = root.getElementById("pattern_id").value;
					var pattern_color = root.getElementById("pattern_color").value;
					var pattern_duration = root.getElementById("pattern_duration").value;
					var pattern_val = {Xoffset: 14, isValid: true, outlinecolor: "#000000", tickstart: 0, trackIndex: -1, tickduration: parseInt(pattern_duration), color: pattern_color, ID: pattern_id};
					var patternEvent = new CustomEvent("denoto-previewpattern", {"detail": pattern_val});
					console.log(pattern_val);
					document.dispatchEvent(patternEvent);
				}
			});

			colorbox.addEventListener('contextmenu', function(){
				event.preventDefault();
				return false;
			});

			colorbox.addEventListener('dblclick', function(){
				var pattern_id = root.getElementById("pattern_id").value;				
        var patternEvent = new CustomEvent('denoto-editpattern', {"detail": rhomb.getSong().getPatterns()[pattern_id]});
				document.dispatchEvent(patternEvent);
			});

			root.getElementById("delete").addEventListener('mouseup', function(){
				var deleteThis = confirm("This will permanently delete the pattern and associated note timings.");
				if(deleteThis){
					var pattern_id = root.getElementById("pattern_id").value;
					var patternEvent = new CustomEvent('denoto-removepattern', {"detail": {"index": pattern_id}});
					document.dispatchEvent(patternEvent);
				}
			});

			root.getElementById("container").addEventListener('editabletext-changed', function(){
				// this does not work to change the name currently
				var pattern_id = root.getElementById("pattern_id").value;
				rhomb.getSong().getPatterns()[pattern_id].setName(event.detail.value);

				var tabEvent = new CustomEvent("denoto-renamepattern", {detail: rhomb.getSong().getPatterns()[pattern_id]});
				document.dispatchEvent(tabEvent);
			});
		};

		patternPrototype.attributeChangedCallback = function(attrName, oldVal, newVal){
			var root = this.shadowRoot;
			if(attrName === "color"){
				root.getElementById("colorbox").style.background = newVal;
				root.getElementById("pattern_color").value = newVal;
			} else if(attrName === "duration"){
				if(parseInt(newVal) > 0)
					root.getElementById("pattern_duration").value = parseInt(newVal);
			} else if(attrName === "id"){
				root.getElementById("pattern_id").value = parseInt(newVal.substring(7));
			} else if(attrName === "value"){
				if(newVal !== "Default Pattern Name")
					root.getElementById("patternname").setAttribute("value", newVal);
			}
		};

		// register the element
		var pattern = document.registerElement('denoto-pattern', {prototype: patternPrototype});
	})();
</script>
