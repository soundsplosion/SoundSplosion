<head>
  <script src="/assets/jquery.min.js"></script>
  <link rel="import" href="<%= asset_path("pianoroll.html")%>">
  <link rel="import" href="<%= asset_path("trackview.html")%>">
  <link rel="import" href="<%= asset_path("transport.html")%>">
  <link rel="import" href="<%= asset_path("savebar.html")%>">
  <link rel="import" href="<%= asset_path("loopcontrol.html")%>">
  <link rel="import" href="<%= asset_path("guidescontrol.html")%>">
  <link rel="import" href="<%= asset_path("musicclock.html")%>">
  <link rel="import" href="<%= asset_path("countdown.html")%>">
  <link rel="import" href="<%= asset_path("editabletext.html")%>">
  <link rel="import" href="<%= asset_path("quantization.html")%>">
  <link rel="import" href="<%= asset_path("endmarker.html")%>">
  <link rel="import" href="<%= asset_path("duration.html")%>">
  <link rel="import" href="<%= asset_path("tabset.html")%>">
  <link rel="import" href="<%= asset_path("effectsgraph.html")%>">
  <link rel="import" href="<%= asset_path("shadowbox.css.erb")%>">
  <script src="<%= asset_path("shadowbox.js")%>"></script>
</head>
<!-- background: #252477; old purplish color 062A78-->
<style type="text/css">
  @font-face{
    font-family: 'Oswald';
    src: url('<%= asset_path("Oswald-Regular.ttf")%>');
  }

  #midi-interface {
    position: absolute;
    top: 150px;
    width: 100%;
  }
  body{
    font-family: 'Oswald', sans-serif;
  }
  #top-bar{
    /*background: #252477;*/
    background: #172837;
    height: 100px;
    width: 100%;
    position: fixed;
    top: 51px;
    z-index: 5;
    padding: 10px;
    color: #FFFFFF;
  }
  denoto-transportbar{
    margin-left: auto;
    margin-right: auto;
    width: 30%;
  }
  denoto-countdown{
    position: absolute;
    top: 25px;
    right: 270px;
  }
  denoto-savebar{
    float: right;
  }
  .navbar{
    position: fixed;
    z-index: 5;
    width: 100%;
  }
  #header_name{
    opacity: 0.9;
    text-align: center;
    font-size: 20px;
    position: relative;
    left: 100px;
  }
</style>

<div id="top-bar" height="75px">
  <denoto-transportbar id="transportbar"></denoto-transportbar>
  <denoto-editabletext id="header_name" type="longtext" width="300"></denoto-editabletext>
  <denoto-countdown id="countdowntimer"></denoto-countdown>
  <denoto-savebar id="savebar"></denoto-savebar>
  <br />
  <denoto-guidescontrol id="guidescontrol"></denoto-guidescontrol><denoto-quantizationcontrol id="quantizationcontrol"></denoto-quantizationcontrol><denoto-musicclock id="musicclock"></denoto-musicclock><denoto-endmarker id="endmarkercontrol"></denoto-endmarker></denoto-musicclock><denoto-duration id="durationcontrol"></denoto-duration>
  <br />
  <denoto-loopcontrol id="loopcontrol"></denoto-loopcontrol>
  <denoto-tabset id="tabset"></denoto-tabset>
</div>

<div id="midi-interface">
  <denoto-trackview id="apptrackview"></denoto-trackview>
</div>
<a id="exp_imp_link"></a>

<script>
  document.addEventListener("keydown", function(){
    if(event.keyCode === 8 && event.path[0].outerHTML.substring(1,6).toUpperCase() !== "INPUT" ){
      event.preventDefault(); // keep the stupid browser back from activation on backspace
    }
  });

  function render(){
    // this is just a dummy function for now
  }

  // instantiate Rhombus, add a pattern and a track to the song
  var rhomb = new Rhombus();

  var lastKeypressed = 0;

  // keyboard events
  document.addEventListener("denoto-keydown",
    function(e){
      rhomb.startPreviewNote(e.detail.keyvalue);
    });
  document.addEventListener("denoto-keyup",
    function(e) {
      rhomb.stopPreviewNote(e.detail.keyvalue);
    });

  // piano roll events
  document.addEventListener("denoto-writenote",
    function(e){
      console.log("[PianoRoll] Writing note ID " + e.detail.note._id + " at tick " + e.detail.note._start + ", length " + e.detail.note._length);
      rhomb.Edit.insertNote(e.detail.note, e.detail.ptnId);
    });
  document.addEventListener("denoto-erasenote",
    function(e){
      console.log("[PianoRoll] Erasing note ID " + e.detail.note._id + " at tick " + e.detail.note._start);
      rhomb.Edit.deleteNote(e.detail.note._id, e.detail.ptnId);
    });
  document.addEventListener("denoto-updatenote",
  function(e){
    console.log("[PianoRoll] Updating note ID " + e.detail.note._id + " at tick " + e.detail.note._start + ", length " + e.detail.note._length);
    rhomb.Edit.changeNoteTime(e.detail.note._id, e.detail.note._start, e.detail.note._length, e.detail.ptnId);
  });

  // transport bar events
  document.getElementById("transportbar").addEventListener("denoto-rewind", 
    function(e){ 
      console.log("[TransportBar] Rewind pressed");
      rhomb.killAllNotes();
      rhomb.moveToPositionTicks(0);
    });
  
  document.getElementById("transportbar").addEventListener("denoto-play", 
    function(e){ 
      console.log("[TransportBar] Play pressed");
      rhomb.startPlayback();
    });
  
  document.getElementById("transportbar").addEventListener("denoto-pause", 
    function(e){ 
      console.log("[TransportBar] Pause pressed");
      rhomb.stopPlayback();
    });
  
  document.getElementById("transportbar").addEventListener("denoto-stop",
     function(e){ 
      console.log("[TransportBar] Stop pressed");
      rhomb.stopPlayback();
      rhomb.moveToPositionTicks(rhomb.getLoopStart());
    });
  
  document.addEventListener("denoto-updateloopstart", updateLoopStart);
  document.addEventListener("denoto-updateloopend", updateLoopEnd);

  function updateLoopStart(e){    
    rhomb.setLoopStart(event.detail.start);
  }
  function updateLoopEnd(e){    
    rhomb.setLoopEnd(event.detail.end);
  }
  
  document.getElementById("transportbar").addEventListener("denoto-fastfwd", function(e){ console.log("[TransportBar] Fastfwd pressed") });

  document.getElementById("transportbar").addEventListener("denoto-loopToggle",
     function(e){ 
      console.log("[TransportBar] Loop pressed");
      rhomb.setLoopEnabled(!rhomb.getLoopEnabled());
      console.log("loopEnabled = " + rhomb.getLoopEnabled());
    });

  document.getElementById("savebar").addEventListener("denoto-exp-wav",
   function(e){ 
    console.log("[TransportBar] Export to wav pressed");
  });

  document.getElementById("savebar").addEventListener("denoto-exp-txt",
     function(e){ 
      console.log("[TransportBar] Export to txt pressed");
      downloadTxt('track.txt', rhomb.exportSong());
    });

  document.getElementById("savebar").addEventListener("denoto-imp-txt",
   function(e){ 
    console.log("[TransportBar] Import txt pressed");
    var reader = new FileReader();
    reader.onload = function(e) {
      var text = reader.result;
    }
    reader.readAsText(file, encoding);
    console.log(reader);
    //openShadowBox("<%= render 'import_form' %>")
  });

  document.getElementById("savebar").addEventListener("denoto-save",
     function(e){ 
      console.log("[TransportBar] Save pressed");
      <% if current_user %>
        <% if url_for(:back).include? '/competitions/' %>
          openShadowBox("<%= render 'competitions/save_track_for_competition', competition_id: url_for(:back).split('/')[-1] %>", 200, 100);
        <% elsif request.original_url.include? '/edit'%>
          uploadFile();
        <% else %>
          openShadowBox("<%= render 'save_track_form' %>", 200, 100);
        <% end %>
      <% else %>
        openShadowBox("Please sign in to save.", 180, 80);
      <% end %>
    });

  // countdown timer events
  document.getElementById("countdowntimer").addEventListener("denoto-endcountdown", function(e){ console.log("[CountdownTimer] Out of time!") });

  function openShadowBox(content, width, height) {
        Shadowbox.open({
        content:    content,
        player:     "html",
        height:     height ? height : 350,
        width:      width ? width : 350,
        options:   { enableKeys : false } 
    });
  }

  Shadowbox.init();

  function get_track_data() {
    $("input[id='track_data']").val(rhomb.exportSong());
  }

  function uploadFile(){
    $.ajax({
      type:'GET',
      url:'/upload/new',
      data: { track_data: rhomb.exportSong(), track_id: '<%= @track.id %>' },
      success: function() {
        openShadowBox("Your change has been saved.", 180, 80);
      },
      error: function(request, status, error) {
        openShadowBox("Competition entry can't be edited.", 180, 80);
      }
    });
  }

  function importSong(data){
    rhomb.importSong(data);
  }

  function downloadTxt(filename, text) {
    var a = document.createElement('a');
    a.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text));
    a.setAttribute('download', filename);
    a.click();
  }
</script>
