<head>
  <script src="/assets/jquery.min.js"></script>
  <link rel="import" href="<%= asset_path("keyboard.html")%>">
  <link rel="import" href="<%= asset_path("blackkey.html")%>">
  <link rel="import" href="<%= asset_path("whitekey.html")%>">
  <link rel="import" href="<%= asset_path("pianoroll.html")%>">
  <link rel="import" href="<%= asset_path("transport.html")%>">
  <link rel="import" href="<%= asset_path("countdown.html")%>">
  <link rel="import" href="<%= asset_path("shadowbox.css")%>">
  <script src="<%= asset_path("shadowbox.js")%>"></script>
</head>
<style type="text/css">
  @font-face{
    font-family: 'Oswald';
    src: url('<%= asset_path("Oswald-Regular.ttf")%>');
  }
  body{
    font-family: 'Oswald', sans-serif;
  }
  #sliders{
    font-family: 'Oswald';
    font-size: 20px;
    opacity: 0.85;
    color: #FFF;
  }
  #top-bar{
    background: #448;
    height: 100px;
    width: 100%;
    position: fixed;
    top: 51px;
    z-index: 4;
  }
  denoto-transportbar{
    margin-left: auto;
    margin-right: auto;
    width: 30%;
  }
  denoto-countdown{
    margin-left: auto;
    margin-right: auto;
    width: 30%; 
  }
  .navbar{
    position: fixed;
    z-index: 4;
    width: 100%;
  }
  .slider{
    width: 70px !important;
    display: inline !important;
  }
</style>

<div id="top-bar" height="75px">
  <denoto-transportbar id="transportbar"></denoto-transportbar>
  <denoto-countdown id="countdowntimer"></denoto-countdown>
  <br /><br />
  
  <!-- move this to webcomponent in post-prototype -->
  <p id="sliders">
    Cutoff <input class="slider" id="cutoff" type="range" min="-12" max="72" step="1" value="24" /> <!-- cutoff, -36 to 36 (singlestepped) -->
    Res <input class="slider" id="resonance" type="range" min="0" max="24" step="1" value="6" /> <!-- resonance (res), 0 to 24 (singlestepped) -->
    Mod <input class="slider" id="mod" type="range" min="0" max="200" step="1" value="30" /> <!-- depth, 0 to 20 (singlestepped) -->
    Att <input class="slider" id="attack" type="range" min="0" max="100" step="1" value="0" /> <!-- attack, 0 to 5 (100 steps) -->
    Dec <input class="slider" id="decay" type="range" min="0" max="100" step="1" value="5" /> <!-- decay, 0 to 5 (100 steps) -->
    Rel <input class="slider" id="release_time" type="range" min="0" max="200" step="1" value="10" /> <!-- release time, 0 to 5 (100 steps) -->
    Echo <input id="echoEnabled" type="checkbox" />
    <input class="slider" id="echo" type="range" min="0" max="100" step="1" value="50" /> <!-- echo, 0 to 1 (100 steps) -->
    Fdbk <input class="slider" id="feedback" type="range" min="0" max="100" step="1" value="50" /> <!-- feedback, 0 to 1 (100 steps) -->
  </p>
</div>

<img id="time_marker" src="<%= asset_path("pixel.png")%>" width="5" height="700" style="z-index: 3; position: absolute; left: 100px;" />

<div id="midi-interface">
  <denoto-keyboard id="appkeyboard" keycount="24"></denoto-keyboard>
  <denoto-pianoroll id="apppianoroll"></denoto-pianoroll>
</div>

<script>
  function render(){
    var position = 100 + rhomb.seconds2Ticks(rhomb.getPosition()) / 3.1;
    if(position > 3695)
      position = 3695;
    document.getElementById('time_marker').setAttribute('style', 'z-index: 3; position: absolute; left: ' + position + 'px;');
    window.requestAnimationFrame(render);
  }

  var rhomb = new Rhombus();
  var ptnId = rhomb._song.addPattern();

  var lastKeypressed = 0;

  // slider events
  document.getElementById("release_time").oninput = function(){
    rhomb.setReleaseTime(parseInt(event.srcElement.value) / 100.0);
  };
  document.getElementById("cutoff").oninput = function(){
    rhomb.setFilterCutoff(parseInt(event.srcElement.value));
  };
  document.getElementById("resonance").oninput = function(){
    rhomb.setFilterRes(parseInt(event.srcElement.value));
  };
  document.getElementById("mod").oninput = function(){
    rhomb.setEnvDepth(parseInt(event.srcElement.value) / 10);
  };
  document.getElementById("attack").oninput = function(){
    rhomb.setAttackTime(0.005 + parseInt(event.srcElement.value) / 100.0);
  };
  document.getElementById("decay").oninput = function(){
    rhomb.setDecayTime(0.010 + parseInt(event.srcElement.value) / 100.0);
  };
  document.getElementById("echo").oninput = function(){
    rhomb.setWetGain(parseInt(event.srcElement.value) / 100.0);
  };
  document.getElementById("echoEnabled").onchange = function(){
    rhomb.setEffectOn(event.srcElement.checked);
  }
  document.getElementById("feedback").oninput = function(){
    rhomb.setFeedbackGain(parseInt(event.srcElement.value) / 100.0);
  };

  // keyboard events
  document.getElementById("appkeyboard").addEventListener("denoto-keydown", 
    function(e){
      rhomb.startPreviewNote(e.detail.keyvalue); 
  });

  document.getElementById("appkeyboard").addEventListener("denoto-keyup", 
    function(e) { 
      rhomb.stopPreviewNote(e.detail.keyvalue); 
    });
  
  // piano roll events
  document.getElementById("apppianoroll").addEventListener("denoto-writenote", 
    function(e){ 
    console.log("[PianoRoll] Writing note ID " + e.detail.note.id + " at tick " + e.detail.note._start + ", length " + e.detail.note._length);
    rhomb.Edit.insertNote(e.detail.note, ptnId);
  });
  document.getElementById("apppianoroll").addEventListener("denoto-erasenote", 
    function(e){
    console.log("[PianoRoll] Erasing note ID " + e.detail.note.id + " at tick " + e.detail.note._start);
    rhomb.Edit.deleteNote(e.detail.note.id, ptnId);
  });
  document.getElementById("apppianoroll").addEventListener("denoto-updatenote", 
    function(e){
    console.log("[PianoRoll] Updating note ID " + e.detail.note.id + " at tick " + e.detail.note._start + ", length " + e.detail.note._length);
    rhomb.Edit.changeNoteTime(e.detail.note.id, e.detail.note._start, e.detail.note._length, ptnId);
  });

  // transport bar events
  document.getElementById("transportbar").addEventListener("denoto-rewind", 
    function(e){ 
      console.log("[TransportBar] Rewind pressed");
      rhomb.moveToPositionTicks(0);
    });
  
  document.getElementById("transportbar").addEventListener("denoto-play", 
    function(e){ 
      console.log("[TransportBar] Play pressed");
      rhomb.startPlayback();
      render();
    });
  
  document.getElementById("transportbar").addEventListener("denoto-pause", 
    function(e){ 
      console.log("[TransportBar] Pause pressed");
      rhomb.stopPlayback();
    });
  
  document.getElementById("transportbar").addEventListener("denoto-stop",
     function(e){ 
      console.log("[TransportBar] Stop pressed");
      rhomb.stopPlayback();
      rhomb.moveToPositionTicks(rhomb.getLoopStart());
    });
  
  document.getElementById("transportbar").addEventListener("denoto-fastfwd", function(e){ console.log("[TransportBar] Fastfwd pressed") });

  document.getElementById("transportbar").addEventListener("denoto-loopToggle",
     function(e){ 
      console.log("[TransportBar] Loop pressed");
      rhomb.setLoopEnabled(!rhomb.getLoopEnabled());
      console.log("loopEnabled = " + rhomb.getLoopEnabled());
    });

  document.getElementById("transportbar").addEventListener("denoto-export",
   function(e){ 
    console.log("[TransportBar] Export pressed");
    openShadowBox(rhomb.exportSong());
  });

  document.getElementById("transportbar").addEventListener("denoto-import",
     function(e){ 
      console.log("[TransportBar] Import pressed");
      openShadowBox("<%= render 'import_form' %>");
    });

  document.getElementById("transportbar").addEventListener("denoto-save",
     function(e){ 
      console.log("[TransportBar] Save pressed");
      <% if current_user %>
        openShadowBox("<%= render 'save_track_form' %>", 200, 100);
      <% else %>
        openShadowBox("Please sign in to save.", 180, 80);
      <% end %>
    });

  // countdown timer events
  document.getElementById("countdowntimer").addEventListener("denoto-endcountdown", function(e){ console.log("[CountdownTimer] Out of time!") });

  function openShadowBox(content, width, height) {
        Shadowbox.open({
        content:    content,
        player:     "html",
        height:     height ? height : 350,
        width:      width ? width : 350,
        options:   { enableKeys : false } 
    });
  }

  Shadowbox.init();

  function uploadFile(){
    $.ajax({
      type:'GET',
      url:'/upload/new',
      data: { track_data: rhomb.exportSong(), track_title: document.getElementById("track_title").value },
      error: function(request, status, error) {
        console.log(request);
        console.log(status);
        console.log(error);
      }
    });
  }

  function importSong(data){
    rhomb.importSong(data);
    Shadowbox.close();
  }
</script>
