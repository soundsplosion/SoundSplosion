<head>
  <link rel="import" href="<%= asset_path("pianoroll.html")%>">
  <link rel="import" href="<%= asset_path("trackview.html")%>">
  <link rel="import" href="<%= asset_path("transport.html")%>">
  <link rel="import" href="<%= asset_path("savebar.html")%>">
  <link rel="import" href="<%= asset_path("loopcontrol.html")%>">
  <link rel="import" href="<%= asset_path("guidescontrol.html")%>">
  <link rel="import" href="<%= asset_path("musicclock.html")%>">
  <link rel="import" href="<%= asset_path("countdown.html")%>">
  <link rel="import" href="<%= asset_path("editabletext.html")%>">
  <link rel="import" href="<%= asset_path("quantization.html")%>">
  <link rel="import" href="<%= asset_path("endmarker.html")%>">
  <link rel="import" href="<%= asset_path("tabset.html")%>">
  <link rel="import" href="<%= asset_path("effectsgraph.html")%>">
  <link rel="import" href="<%= asset_path("frequencyspectrum.html")%>">
  <link rel="import" href="<%= asset_path("dialog.html")%>">
  <script src="<%= asset_path("shadowbox.js")%>"></script>
  <script src="<%= asset_path("graph.js")%>"></script>
  <script src="<%= asset_path("recorder.js")%>"></script>
</head>
<style type="text/css">
  @font-face{
    font-family: 'Oswald';
    src: url('<%= asset_path("Oswald-Regular.ttf")%>');
  }

  #midi-interface {
    position: absolute;
    top: 150px;
    width: 100%;
  }
  body{
    font-family: 'Oswald', sans-serif;
  }
  #top-bar{
    background: #172837;
    height: 100px;
    width: 100%;
    position: fixed;
    top: 51px;
    z-index: 6;
    padding: 10px;
    color: #FFFFFF;
  }
  denoto-transportbar{
    margin-left: auto;
    margin-right: auto;
    width: 30%;
  }
  denoto-countdown{
    position: absolute;
    top: 25px;
    right: 270px;
  }
  denoto-savebar{
    float: right;
  }
  .navbar{
    position: fixed;
    z-index: 5;
    width: 100%;
  }
  #header_name{
    opacity: 0.9;
    text-align: center;
    font-size: 20px;
    position: relative;
    left: 100px;
  }
  #tabset{
    position: absolute;
    top: 60px;
    left: 125px;
    width: 100%;
    z-index: 3;
  }
  #loopcontrol{
    z-index: 4;
  }
  #quantizationcontrol{
    z-index: 4;
  }
  #musicclock{
    z-index: 4;
  }
  #endmarkercontrol{
    z-index: 4;
  }
</style>

<div id="top-bar" height="75px">
  <denoto-transportbar id="transportbar"></denoto-transportbar>
  <denoto-editabletext id="header_name" type="longtext" width="300"></denoto-editabletext>
  <denoto-savebar id="savebar"></denoto-savebar>
  <denoto-spectrum id="freq_spectrum"></denoto-spectrum>
  <br />
  <denoto-loopcontrol id="loopcontrol"></denoto-loopcontrol></denoto-guidescontrol><denoto-quantizationcontrol id="quantizationcontrol"></denoto-quantizationcontrol><denoto-musicclock id="musicclock"></denoto-musicclock><denoto-endmarker id="endmarkercontrol"></denoto-endmarker></denoto-musicclock>
  <br />
  <denoto-tabset id="tabset"></denoto-tabset>
</div>

<div id="midi-interface">
  <denoto-trackview id="apptrackview"></denoto-trackview>
</div>
<a id="exp_imp_link"></a>

<input type="file" id="txt_input" />
<denoto-dialog id="appdialogbox"></denoto-dialog>

<script>
  document.addEventListener("keydown", function(){
    if(event.keyCode === 8 && event.path[0].outerHTML.substring(1,6).toUpperCase() !== "INPUT" ){
      event.preventDefault(); // keep the stupid browser back from activation on backspace
    }
  });  
</script>

<script>
  var competition_constraints = {
  <% if url_for(:back).include? '/competitions/' %>
    <% competition = Competition.find(url_for(:back).split('/')[-1]) %>
    <% if !competition.nil? %>
      <% if !competition.min_tracks.nil? %>
        min_tracks : <%= competition.min_tracks %>,
      <% end %>
      <% if !competition.max_tracks.nil? %>
        max_tracks : <%= competition.max_tracks %>,
      <% end %>
      <% if !competition.min_notes.nil? %>
        min_notes : <%= competition.min_notes %>,
      <% end %>
      <% if !competition.max_notes.nil? %>
        max_notes : <%= competition.max_notes %>,
      <% end %>
      <% if !competition.min_patterns.nil? %>
        min_notes : <%= competition.min_patterns %>,
      <% end %>
      <% if !competition.max_patterns.nil? %>
        max_notes : <%= competition.max_patterns %>,
      <% end %>
      <% if !competition.min_effects.nil? %>
        min_effects : <%= competition.min_effects %>,
      <% end %>
      <% if !competition.max_effects.nil? %>
        max_effects : <%= competition.max_effects %>,
      <% end %>
      <% if !competition.min_instruments.nil? %>
        min_instruments : <%= competition.min_instruments %>,
      <% end %>
      <% if !competition.max_instruments.nil? %>
        max_instruments : <%= competition.max_instruments %>,
      <% end %>
    <% end %>
  <% end %>
  };
 
  function render(){
    // this is just a dummy function for now
  }

  // instantiate Rhombus
  var rhomb = makeDenotoRhombus(competition_constraints);
  var save_span = $(savebar.shadowRoot.childNodes[3]);
  var lastKeypressed = 0;

  // keep track of the starting position
  var startPosition = rhomb.seconds2Ticks(rhomb.getPosition());

  // initialize the time display
  var timeEvent = new CustomEvent("denoto-setcurrenttime", {"detail": {"ticks": 0}});
  document.dispatchEvent(timeEvent);

  // initialize the BPM display
  var bpm = rhomb.getBpm();
  var bpmEvent = new CustomEvent("denoto-setbpm", {"detail": {"bpm" : bpm}});
  document.dispatchEvent(bpmEvent);

  var previewVelocity = 0.5;

  rhomb.Undo._clearUndoStack();

  rhomb.enableMidi();

  document.addEventListener("denoto-setinsertvelocity",
    function(e){
      previewVelocity = e.detail.velocity;
    });

  // keyboard events
  document.addEventListener("denoto-keydown",
    function(e){
      rhomb.startPreviewNote(parseInt(e.detail.keyvalue, 10), previewVelocity);
    });
  document.addEventListener("denoto-keyup",
    function(e) {
      rhomb.stopPreviewNote(parseInt(e.detail.keyvalue, 10));
    });

  document.addEventListener("denoto-updatestartpos",
    function(e) {
      // TODO: determine if it's better to always update the start position,
      //       or to only update it when playback is stopped
      if (!rhomb.isPlaying()) {
        startPosition = rhomb.seconds2Ticks(rhomb.getPosition());
      }
    }
  );

  // transport bar events
  document.getElementById("transportbar").addEventListener("denoto-rewind", 
    function(e){ 
      console.log("[TransportBar] Rewind pressed");
      rhomb.killAllNotes();
      rhomb.moveToPositionTicks(0);
      startPosition = rhomb.seconds2Ticks(rhomb.getPosition());
    });
  
  document.getElementById("transportbar").addEventListener("denoto-play", 
    function(e){ 
      console.log("[TransportBar] Play pressed");
      rhomb.startPlayback();
      startPosition = rhomb.seconds2Ticks(rhomb.getPosition());
    });
  
  document.getElementById("transportbar").addEventListener("denoto-pause", 
    function(e){ 
      console.log("[TransportBar] Pause pressed");
      rhomb.stopPlayback();
      startPosition = rhomb.seconds2Ticks(rhomb.getPosition());
    });
  
  document.getElementById("transportbar").addEventListener("denoto-stop",
     function(e){ 
      console.log("[TransportBar] Stop pressed");

      if (rhomb.isPlaying()) {
        rhomb.stopPlayback();
        var curPos = rhomb.seconds2Ticks(rhomb.getPosition());
        if (rhomb.getLoopEnabled() && curPos > rhomb.getLoopStart()) {
          rhomb.moveToPositionTicks(rhomb.getLoopStart());
        }
        else {
          rhomb.moveToPositionTicks(0);
        }
      }
      else {
        rhomb.moveToPositionTicks(0);
      }

      var posEvent = new CustomEvent("denoto-updatestartpos");
      document.dispatchEvent(posEvent);
    });

  document.addEventListener('rhombus-stop', function() {
    rhomb.moveToPositionTicks(startPosition);
    document.dispatchEvent(new CustomEvent("denoto-updatestartpos"));
  });
  
  document.addEventListener("denoto-updateloopstart", updateLoopStart);
  document.addEventListener("denoto-updateloopend", updateLoopEnd);

  function updateLoopStart(e){    
    rhomb.setLoopStart(event.detail.start);
  }
  function updateLoopEnd(e){    
    rhomb.setLoopEnd(event.detail.end);
  }

  document.getElementById("transportbar").addEventListener("denoto-loopToggle",
     function(e){ 
      console.log("[TransportBar] Loop pressed");
      rhomb.setLoopEnabled(!rhomb.getLoopEnabled());
      console.log("loopEnabled = " + rhomb.getLoopEnabled());
    });

  document.getElementById("savebar").addEventListener("denoto-exp-wav",
   function(e){ 
    console.log("[TransportBar] Export to wav pressed");
    downloadWAV();

    // Hide buttons after export
    save_span.find("#exporttxt").css("visibility", "hidden");
    save_span.find("#exportwav").css("visibility", "hidden");
    save_span.find("#exportmid").css("visibility", "hidden");
  });

  document.getElementById("savebar").addEventListener("denoto-exp-txt",
     function(e){
      console.log("[TransportBar] Export to txt pressed");
      downloadTxt('track.txt', rhomb.exportSong());

      save_span.find("#exporttxt").css("visibility", "hidden");
      save_span.find("#exportwav").css("visibility", "hidden");
      save_span.find("#exportmid").css("visibility", "hidden");
    });

  document.getElementById("savebar").addEventListener("denoto-exp-mid",
     function(e) {
      console.log("[TransportBar] Export to mid pressed");
      downloadMidi('track.midi', rhomb.Midi.getRawMidi());

      save_span.find("#exportmid").css("visibility", "hidden");
      save_span.find("#exporttxt").css("visibility", "hidden");
      save_span.find("#exportwav").css("visibility", "hidden");
    });

  document.addEventListener("rhombus-exportmidi",
     function(e) {
      downloadMidi('track.midi', e.detail);
    });

  document.getElementById("savebar").addEventListener("denoto-imp-txt",
     function(e){ 
      console.log("[TransportBar] Import txt pressed");

      $("#txt_input").click();
      txt_input.addEventListener("change", importFile, false);

      // Hide button after import
      save_span.find("#importtxt").css("visibility", "hidden");
  });

  document.getElementById("savebar").addEventListener("denoto-save",
     function(e){ 
      console.log("[TransportBar] Save pressed");
      <% if current_user %>
        <% if url_for(:back).include? '/competitions/' %>
          checkCompetitionParams("<%= url_for(:back).split('/')[-1] %>");
        <% elsif request.original_url.include? '/edit'%>
          uploadFile("<%= request.original_url.split('/')[-2] %>");
        <% else %>
          var div = document.createElement("div");
          var form = document.createElement("form");
          form.setAttribute("id", "saveform");
          form.setAttribute("action", "/tracks");
          form.setAttribute("method", "post");
          form.setAttribute("onsubmit", 'get_track_data();');
          div.appendChild(form);

          var auth = document.createElement("input");
          auth.setAttribute("name", "authenticity_token");
          auth.setAttribute("type", "hidden");
          auth.setAttribute("value", "<%= form_authenticity_token %>");
          form.appendChild(auth);

          var trk_data = document.createElement("input");
          trk_data.setAttribute("name", "track_data");
          trk_data.setAttribute("id", "track_data");
          trk_data.setAttribute("type", "hidden");
          trk_data.setAttribute("value", "");
          form.appendChild(trk_data);

          var trk_title = document.createElement("input");
          trk_title.setAttribute("id", "track_title");
          trk_title.setAttribute("name", "track[title]");
          trk_title.setAttribute("type", "text");
          trk_title.setAttribute("size", "32");
          form.appendChild(trk_title);

          var dialogEvent = new CustomEvent("denoto-dialogbox", {"detail": {
              type: "ok",
              caption: "Enter a name for your song:",
              message: "",
              okButton: "Save",
              okHandler: function(){ form.submit(); },
              inescapable: false,
              htmlNode: div
            }}
          );
          document.dispatchEvent(dialogEvent);
        <% end %>
      <% else %>
        var dialogEvent = new CustomEvent("denoto-dialogbox", {"detail": {
            type: "ok",
            caption: "Unable to save",
            message: "Please sign in to save your song.",
            okButton: "OK",
            okHandler: function(){},
            inescapable: false,
            htmlNode: undefined
          }}
        );
        document.dispatchEvent(dialogEvent);
      <% end %>
    });

  <% if url_for(:back).include? '/competitions/' %>
    // initialize the remaining time display
    var now = new Date();
    var endTime = new Date("<%= Competition.find(url_for(:back).split('/')[-1]).enddate %>");
    // get total seconds of remaining time
    var delta = Math.abs(endTime - now) / 1000;
    var hours = parseInt(Math.floor(delta / 3600), 10);
    delta -= hours * 3600;
    var minutes = parseInt(Math.floor(delta / 60) % 60, 10);
    delta -= minutes * 60;
    var seconds = parseInt(delta % 60, 10);

    var remainingtimeEvent = new CustomEvent("denoto-settimeremaining", {"detail": {"hours": hours, "minutes": minutes, "seconds": seconds}});
    document.dispatchEvent(remainingtimeEvent);
  <% else %>
    $(apptrackview.shadowRoot.querySelector("#footer #countdowntimer")).css("visibility", "hidden");
  <% end %>
  // countdown timer events
  //document.getElementById("countdowntimer").addEventListener("denoto-endcountdown", function(e){ console.log("[CountdownTimer] Out of time!") });

  function openShadowBox(content, width, height) {
        Shadowbox.open({
        content:    content,
        player:     "html",
        height:     height ? height : 350,
        width:      width ? width : 350,
        options:   { enableKeys : false }
    });
  }

  Shadowbox.init();

  function get_track_data() {
    $("input[id='track_data']").val(rhomb.exportSong());
  }

  function uploadFile(id){
    var track_id = '<%= @track %>';
    $.ajax({
      type:'GET',
      url:'/upload/new',
      data: { track_data: rhomb.exportSong(), track_id: id },
      success: function() {
        openShadowBox("<p style='color: #9AB9E5'>Your change has been saved.</p>", 180, 50);
      },
      error: function(request, status, error) {
        openShadowBox("<p style='color: #9AB9E5'>You cannot save this song because it's either not yours.</p>", 180, 80);
      }
    });
  }

  function importSong(data) {

    // stop playback and kill all notes that are playing
    rhomb.stopPlayback();
    rhomb.killAllNotes();

    rhomb.setLoopEnabled(false);
    rhomb.moveToPositionTicks(0);

    console.log("[New] - stopping playback and killing all notes");

    // this also nukes the existing song in Rhombus
    rhomb.importSong(data);
   
    // initialize the time display
    var timeEvent = new CustomEvent("denoto-setcurrenttime", {"detail": {"ticks": 0}});
    document.dispatchEvent(timeEvent);

    // initialize the BPM display
    var bpm = rhomb.getBpm();
    var bpmEvent = new CustomEvent("denoto-setbpm", {"detail": {"bpm" : bpm}});
    document.dispatchEvent(bpmEvent);

    // initialize the loopbar
    var loopEvent = new CustomEvent("denoto-updateloopstart", {"detail": {"start": rhomb.getLoopStart()}});
    document.dispatchEvent(loopEvent);

    loopEvent = new CustomEvent("denoto-updateloopend", {"detail": {"end": rhomb.getLoopEnd()}});
    document.dispatchEvent(loopEvent);

    var initEvent = new CustomEvent("denoto-initsong");
    document.dispatchEvent(initEvent);
  }

  function downloadTxt(filename, text) {
    var a = document.createElement('a');
    a.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text));
    a.setAttribute('download', filename);
    a.click();
  }

  function downloadMidi(filename, data) {
    if (typeof rhomb === "undefined") {
      return;
    }

    if (rhomb.isPlaying()) {
      rhomb.stopPlayback();
      rhomb.moveToPositionSeconds(0);
      document.dispatchEvent(new CustomEvent("rhombus-stop", {"detail": "stop"}));
    }

    var fname = prompt("Please enter a filename", "default.midi");

    if (fname === null) {
      console.log("[Denoto] - MIDI export cancelled");
      return;
    }

    var blob = new Blob([data], {type: 'octet/stream'});
    var url = (window.URL || window.webkitURL).createObjectURL(blob);
    var link = window.document.createElement('a');
    link.href = url;
    link.download = fname;
    var click = document.createEvent("Event");
    click.initEvent("click", true, true);
    link.dispatchEvent(click);
  }

  function downloadWAV(filename, text) {
    var recorderCfg = {"workerPath": "<%= asset_path("recorderWorker.js")%>"};
    var recorder = new Recorder(Tone.Master.output, recorderCfg);
    rhomb.stopPlayback();
    rhomb.moveToPositionSeconds(0);
    recorder.record();
    save_span.prepend("<div id='message' style='position: absolute; right: 130px;'><h3>Recording now..</h3></div>");
    rhomb.startPlayback();

    setTimeout(function(){
      recorder.stop();
      save_span.find("#message").remove();
      recorder.exportWAV(function(blob) {
        Recorder.forceDownload(blob, 'output.wav');
      });
    }, rhomb.getSongLengthSeconds() * 1000);
  }

  function importFile(evt) {
    var files = evt.target.files,
      reader = new FileReader();
    reader.onload = function() {
      importSong(this.result);
      var importEvent = new CustomEvent('denoto-importsong', {"detail": ""});
      document.dispatchEvent(importEvent);
    };
    reader.readAsText(files[0]);
  }

  function checkCompetitionParams(competition_id) {
    $.ajax({
      type:'GET',
      url:'/tracks/check_constraints',
      data: { track_data: rhomb.exportSong(), competition_id: competition_id },
      success: function(response) {
        if(response == "VALID") {
          <% if request.original_url.include? '/edit' %>
            uploadFile("<%= request.original_url.split('/')[-2] %>");
          <% else %>
            openShadowBox("<%= render 'competitions/save_track_for_competition', competition_id: url_for(:back).split('/')[-1] %>", 215, 115);
          <% end %>
        } else {
          // Let the user know what was wrong
          openShadowBox("<p style='color: #9AB9E5'>" + response + "</p>", 240, 50);
        }
      }
    });
  }
</script>
